function varargout = Q32(varargin)
% Q32 MATLAB code for Q32.fig
%      Q32, by itself, creates a new Q32 or raises the existing
%      singleton*.
%
%      H = Q32 returns the handle to a new Q32 or the handle to
%      the existing singleton*.
%
%      Q32('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in Q32.M with the given input arguments.
%
%      Q32('Property','Value',...) creates a new Q32 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Q32_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Q32_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Q32

% Last Modified by GUIDE v2.5 20-Mar-2019 03:09:45

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Q32_OpeningFcn, ...
                   'gui_OutputFcn',  @Q32_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Q32 is made visible.
function Q32_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Q32 (see VARARGIN)

% Choose default command line output for Q32
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Q32 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Q32_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
B=bitget(f,1);
axes(handles.axes1);
imshow(double(B));

% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

f= imread('images.jpg');
B=bitget(f,2);
axes(handles.axes1);
imshow(double(B));
% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

f= imread('images.jpg');
B=bitget(f,3);
axes(handles.axes1);
imshow(double(B));
% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
B=bitget(f,4);
axes(handles.axes1);
imshow(double(B));

% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

f= imread('images.jpg');
B=bitget(f,8);
axes(handles.axes1);
imshow(double(B));
% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
B=bitget(f,7);
axes(handles.axes1);
imshow(double(B));

% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

f= imread('images.jpg');
B=bitget(f,6);
axes(handles.axes1);
imshow(double(B));
% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
B=bitget(f,5);
axes(handles.axes1);
imshow(double(B));


% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f = imread('images.jpg');
w1 =1/9.* [1 1 1; 
           1 1 1; 
           1 1 1];
  g1 = imfilter(f,w1);
 axes(handles.axes1);
 imshow(g1,[]); 
% --- Executes on button press in pushbutton10.
function pushbutton10_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f = imread('images.jpg');
w2 =1/10.* [1 1 1; 
            1 2 1; 
            1 1 1];
   g2 = imfilter(f,w2);
 axes(handles.axes1);
 imshow(g2,[]);
% --- Executes on button press in pushbutton11.
function pushbutton11_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

f = imread('images.jpg');
w3 =1/16.* [2 1 2; 
             1 4 1; 
             2 1 2];
   g3 = imfilter(f,w3);
 axes(handles.axes1);
 imshow(g3,[]);
% --- Executes on button press in pushbutton12.
function pushbutton12_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
h1 =1/9.* [-1 -1 -1; 
           -1 8 -1; 
           -1 -1 -1];
 f1 = imfilter(f,h1);
 axes(handles.axes1);
 imshow(f1,[]);

% --- Executes on button press in pushbutton13.
function pushbutton13_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
h2 =1/10.* [0 -1 0; 
            -1 4 -1; 
            0 -1 0];
 f2 = imfilter(f,h2);
 axes(handles.axes1);
 imshow(f2,[]);

% --- Executes on button press in pushbutton14.
function pushbutton14_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
f= imread('images.jpg');
h3 =1/16.* [-1 -2 -1; 
             -2 12 -2; 
             -1 -2 -1];
 f3 = imfilter(f,h3);
 axes(handles.axes1);
 imshow(f3,[]);
